{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "07cc3703",
   "metadata": {},
   "source": [
    "3)\tCreate an interactive Dashboard aimed at younger adults (18 - 35 years) with specific features to summarise the most important aspects of the data and identify through your visualisation why this dataset is suitable for Machine Learning models in an online retail business. Explain how your dashboard is designed with this demographic in mind."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37b06e07",
   "metadata": {},
   "source": [
    "# Integrating the Music Data Dashboard into the Online Retail Business\n",
    "\n",
    "## Overview\n",
    "The **Music Data Dashboard** is a powerful interactive tool designed to analyze the relationships between music genres, sentiments, and key musical metrics. This dashboard, built using Dash and Plotly Express, can provide valuable insights for the online retail music industry, enhancing user engagement and driving business growth.\n",
    "\n",
    "## Key Features\n",
    "\n",
    "### Sentiment Analysis by Genre\n",
    "- Visualize how different genres are perceived in terms of sentiment (positive, neutral, negative).\n",
    "- Tailor marketing strategies to match user preferences.\n",
    "\n",
    "### Sentiment vs. Popularity\n",
    "- Explore how track sentiment correlates with popularity.\n",
    "- Curate playlists and recommendations to boost user satisfaction.\n",
    "\n",
    "### Sentiment vs. Danceability and Energy\n",
    "- Analyze the impact of sentiment on danceability and energy levels of tracks.\n",
    "- Create mood-based playlists for various activities.\n",
    "\n",
    "### Mood Navigator\n",
    "- Discover tracks based on mood metrics (danceability, energy, valence, etc.).\n",
    "- Enhance personalized user experiences with targeted track recommendations.\n",
    "\n",
    "## Business Applications\n",
    "\n",
    "### Personalized Recommendations\n",
    "Offer tailored music suggestions to enhance user retention.\n",
    "\n",
    "### Targeted Marketing\n",
    "Use sentiment and genre data to create effective marketing campaigns.\n",
    "\n",
    "### Playlist Curation\n",
    "Develop engaging playlists that match user moods and preferences.\n",
    "\n",
    "### Data-Driven Insights\n",
    "Provide valuable feedback to artists and labels for strategic decisions.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "095c0aad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8056/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x21a3e8ced90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from dash import dcc, html\n",
    "from dash.dependencies import Input, Output\n",
    "import dash\n",
    "import plotly.express as px\n",
    "\n",
    "df_reduced = pd.read_csv('reduced_dataset.csv')\n",
    "\n",
    "vibrant_palette = {\n",
    "    'positive': '#00CC96',\n",
    "    'neutral': '#636EFA',\n",
    "    'negative': '#EF553B'\n",
    "}\n",
    "\n",
    "fig_genre_sentiment = px.bar(\n",
    "    df_reduced.groupby(['track_genre', 'sentiment']).size().reset_index(name='count'),\n",
    "    x='track_genre', y='count', color='sentiment', barmode='stack',\n",
    "    color_discrete_map=vibrant_palette, \n",
    "    title='Sentiment Distribution by Genre'\n",
    ")\n",
    "fig_genre_sentiment.update_layout(\n",
    "    title_font_size=24, title_font_color='#2E86C1', title_x=0.5,\n",
    "    xaxis_title='Genre', yaxis_title='Count',\n",
    "    legend_title='Sentiment', xaxis_tickangle=-45,\n",
    "    plot_bgcolor='white', paper_bgcolor='white',\n",
    "    font=dict(size=16)\n",
    ")\n",
    "\n",
    "fig_sentiment_popularity = px.box(\n",
    "    df_reduced, x='sentiment', y='popularity', color='sentiment', \n",
    "    color_discrete_map=vibrant_palette,\n",
    "    title='Sentiment vs. Popularity'\n",
    ")\n",
    "fig_sentiment_popularity.update_layout(\n",
    "    title_font_size=24, title_font_color='#2E86C1', title_x=0.5,\n",
    "    xaxis_title='Sentiment', yaxis_title='Popularity',\n",
    "    plot_bgcolor='white', paper_bgcolor='white',\n",
    "    font=dict(size=16)\n",
    ")\n",
    "\n",
    "fig_sentiment_danceability = px.box(\n",
    "    df_reduced, x='sentiment', y='danceability', color='sentiment', \n",
    "    color_discrete_map=vibrant_palette,\n",
    "    title='Sentiment vs. Danceability'\n",
    ")\n",
    "fig_sentiment_danceability.update_layout(\n",
    "    title_font_size=24, title_font_color='#2E86C1', title_x=0.5,\n",
    "    xaxis_title='Sentiment', yaxis_title='Danceability',\n",
    "    plot_bgcolor='white', paper_bgcolor='white',\n",
    "    font=dict(size=16)\n",
    ")\n",
    "\n",
    "fig_sentiment_energy = px.box(\n",
    "    df_reduced, x='sentiment', y='energy', color='sentiment', \n",
    "    color_discrete_map=vibrant_palette,\n",
    "    title='Sentiment vs. Energy'\n",
    ")\n",
    "fig_sentiment_energy.update_layout(\n",
    "    title_font_size=24, title_font_color='#2E86C1', title_x=0.5,\n",
    "    xaxis_title='Sentiment', yaxis_title='Energy',\n",
    "    plot_bgcolor='white', paper_bgcolor='white',\n",
    "    font=dict(size=16)\n",
    ")\n",
    "\n",
    "app = dash.Dash(__name__)\n",
    "\n",
    "app.layout = html.Div([\n",
    "    html.H1(\"Music Data Dashboard\", style={'text-align': 'center', 'color': '#2E86C1'}),\n",
    "    \n",
    "    dcc.Dropdown(\n",
    "        id='genre-filter',\n",
    "        options=[{'label': genre, 'value': genre} for genre in df_reduced['track_genre'].unique()],\n",
    "        value=[],\n",
    "        multi=True,\n",
    "        placeholder=\"Choose your Vibe (Genre)\"\n",
    "    ),\n",
    "    \n",
    "    dcc.Dropdown(\n",
    "        id='mood-metric',\n",
    "        options=[\n",
    "            {'label': 'Danceability (Get Groovy)', 'value': 'danceability'},\n",
    "            {'label': 'Energy (Pump it Up)', 'value': 'energy'},\n",
    "            {'label': 'Valence (Feel-Good Factor)', 'value': 'valence'},\n",
    "            {'label': 'Acousticness (Unplugged Vibes)', 'value': 'acousticness'},\n",
    "            {'label': 'Liveness (Live Feels)', 'value': 'liveness'},\n",
    "            {'label': 'Speechiness (Talk the Talk)', 'value': 'speechiness'}\n",
    "        ],\n",
    "        value='danceability',\n",
    "        placeholder=\"Select Your Mood Metric\"\n",
    "    ),\n",
    "    \n",
    "    dcc.Tabs([\n",
    "        dcc.Tab(label='Sentiment Distribution by Genre', children=[\n",
    "            dcc.Graph(id='sentiment-genre-bar', figure=fig_genre_sentiment)\n",
    "        ]),\n",
    "        \n",
    "        dcc.Tab(label='Sentiment vs. Popularity', children=[\n",
    "            dcc.Graph(id='sentiment-popularity-box', figure=fig_sentiment_popularity)\n",
    "        ]),\n",
    "        \n",
    "        dcc.Tab(label='Sentiment vs. Danceability', children=[\n",
    "            dcc.Graph(id='sentiment-danceability-box', figure=fig_sentiment_danceability)\n",
    "        ]),\n",
    "        \n",
    "        dcc.Tab(label='Sentiment vs. Energy', children=[\n",
    "            dcc.Graph(id='sentiment-energy-box', figure=fig_sentiment_energy)\n",
    "        ]),\n",
    "        \n",
    "        dcc.Tab(label='Mood Navigator', children=[\n",
    "            dcc.Graph(id='mood-navigator')\n",
    "        ]),\n",
    "    ], colors={\n",
    "        \"border\": \"#2E86C1\",\n",
    "        \"primary\": \"#2E86C1\",\n",
    "        \"background\": \"white\"\n",
    "    })\n",
    "])\n",
    "\n",
    "@app.callback(\n",
    "    [Output('sentiment-genre-bar', 'figure'),\n",
    "     Output('sentiment-popularity-box', 'figure'),\n",
    "     Output('sentiment-danceability-box', 'figure'),\n",
    "     Output('sentiment-energy-box', 'figure'),\n",
    "     Output('mood-navigator', 'figure')],\n",
    "    [Input('genre-filter', 'value'),\n",
    "     Input('mood-metric', 'value')]\n",
    ")\n",
    "def update_figures(selected_genres, mood_metric):\n",
    "    if not selected_genres:\n",
    "        filtered_df = df_reduced\n",
    "    else:\n",
    "        filtered_df = df_reduced[df_reduced['track_genre'].isin(selected_genres)]\n",
    "    \n",
    "    fig_genre_sentiment = px.bar(\n",
    "        filtered_df.groupby(['track_genre', 'sentiment']).size().reset_index(name='count'),\n",
    "        x='track_genre', y='count', color='sentiment', barmode='stack',\n",
    "        color_discrete_map=vibrant_palette, \n",
    "        title='Sentiment Distribution by Genre'\n",
    "    )\n",
    "    fig_genre_sentiment.update_layout(\n",
    "        title_font_size=24, title_font_color='#2E86C1', title_x=0.5,\n",
    "        xaxis_title='Genre', yaxis_title='Count',\n",
    "        legend_title='Sentiment', xaxis_tickangle=-45,\n",
    "        plot_bgcolor='white', paper_bgcolor='white',\n",
    "        font=dict(size=16)\n",
    "    )\n",
    "\n",
    "    fig_sentiment_popularity = px.box(\n",
    "        filtered_df, x='sentiment', y='popularity', color='sentiment', \n",
    "        color_discrete_map=vibrant_palette,\n",
    "        title='Sentiment vs. Popularity'\n",
    "    )\n",
    "    fig_sentiment_popularity.update_layout(\n",
    "        title_font_size=24, title_font_color='#2E86C1', title_x=0.5,\n",
    "        xaxis_title='Sentiment', yaxis_title='Popularity',\n",
    "        plot_bgcolor='white', paper_bgcolor='white',\n",
    "        font=dict(size=16)\n",
    "    )\n",
    "\n",
    "    fig_sentiment_danceability = px.box(\n",
    "        filtered_df, x='sentiment', y='danceability', color='sentiment', \n",
    "        color_discrete_map=vibrant_palette,\n",
    "        title='Sentiment vs. Danceability'\n",
    "    )\n",
    "    fig_sentiment_danceability.update_layout(\n",
    "        title_font_size=24, title_font_color='#2E86C1', title_x=0.5,\n",
    "        xaxis_title='Sentiment', yaxis_title='Danceability',\n",
    "        plot_bgcolor='white', paper_bgcolor='white',\n",
    "        font=dict(size=16)\n",
    "    )\n",
    "\n",
    "    fig_sentiment_energy = px.box(\n",
    "        filtered_df, x='sentiment', y='energy', color='sentiment', \n",
    "        color_discrete_map=vibrant_palette,\n",
    "        title='Sentiment vs. Energy'\n",
    "    )\n",
    "    fig_sentiment_energy.update_layout(\n",
    "        title_font_size=24, title_font_color='#2E86C1', title_x=0.5,\n",
    "        xaxis_title='Sentiment', yaxis_title='Energy',\n",
    "        plot_bgcolor='white', paper_bgcolor='white',\n",
    "        font=dict(size=16)\n",
    "    )\n",
    "    \n",
    "    fig_mood_navigator = px.scatter(\n",
    "        filtered_df, x=mood_metric, y='energy', color='sentiment', size='popularity', \n",
    "        hover_data=['track_name', 'artists'], color_discrete_map=vibrant_palette,\n",
    "        title=f'Find Your Track Based on {mood_metric.split()[0].capitalize()} and Energy'\n",
    "    )\n",
    "    fig_mood_navigator.update_layout(\n",
    "        title_font_size=24, title_font_color='#2E86C1', title_x=0.5,\n",
    "        xaxis_title=mood_metric.split()[0].capitalize(), yaxis_title='Energy',\n",
    "        plot_bgcolor='white', paper_bgcolor='white',\n",
    "        font=dict(size=16)\n",
    "    )\n",
    "    \n",
    "    return (fig_genre_sentiment, fig_sentiment_popularity, fig_sentiment_danceability, fig_sentiment_energy, fig_mood_navigator)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=True, port=8056)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fc54418f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting streamlit\n",
      "  Obtaining dependency information for streamlit from https://files.pythonhosted.org/packages/0e/86/69fdac2ec6852304bda08e5af5b72dfa6e74dc0b3cef0d7c1e19994388ae/streamlit-1.35.0-py2.py3-none-any.whl.metadata\n",
      "  Downloading streamlit-1.35.0-py2.py3-none-any.whl.metadata (8.5 kB)\n",
      "Requirement already satisfied: altair<6,>=4.0 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from streamlit) (5.2.0)\n",
      "Collecting blinker<2,>=1.0.0 (from streamlit)\n",
      "  Obtaining dependency information for blinker<2,>=1.0.0 from https://files.pythonhosted.org/packages/bb/2a/10164ed1f31196a2f7f3799368a821765c62851ead0e630ab52b8e14b4d0/blinker-1.8.2-py3-none-any.whl.metadata\n",
      "  Downloading blinker-1.8.2-py3-none-any.whl.metadata (1.6 kB)\n",
      "Collecting cachetools<6,>=4.0 (from streamlit)\n",
      "  Obtaining dependency information for cachetools<6,>=4.0 from https://files.pythonhosted.org/packages/fb/2b/a64c2d25a37aeb921fddb929111413049fc5f8b9a4c1aefaffaafe768d54/cachetools-5.3.3-py3-none-any.whl.metadata\n",
      "  Downloading cachetools-5.3.3-py3-none-any.whl.metadata (5.3 kB)\n",
      "Requirement already satisfied: click<9,>=7.0 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from streamlit) (8.0.4)\n",
      "Requirement already satisfied: numpy<2,>=1.19.3 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from streamlit) (1.24.4)\n",
      "Requirement already satisfied: packaging<25,>=16.8 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from streamlit) (23.0)\n",
      "Requirement already satisfied: pandas<3,>=1.3.0 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from streamlit) (1.5.3)\n",
      "Requirement already satisfied: pillow<11,>=7.1.0 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from streamlit) (9.4.0)\n",
      "Requirement already satisfied: protobuf<5,>=3.20 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from streamlit) (4.25.3)\n",
      "Requirement already satisfied: pyarrow>=7.0 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from streamlit) (11.0.0)\n",
      "Requirement already satisfied: requests<3,>=2.27 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from streamlit) (2.31.0)\n",
      "Requirement already satisfied: rich<14,>=10.14.0 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from streamlit) (13.7.1)\n",
      "Requirement already satisfied: tenacity<9,>=8.1.0 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from streamlit) (8.2.2)\n",
      "Requirement already satisfied: toml<2,>=0.10.1 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from streamlit) (0.10.2)\n",
      "Requirement already satisfied: typing-extensions<5,>=4.3.0 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from streamlit) (4.7.1)\n",
      "Collecting gitpython!=3.1.19,<4,>=3.0.7 (from streamlit)\n",
      "  Obtaining dependency information for gitpython!=3.1.19,<4,>=3.0.7 from https://files.pythonhosted.org/packages/e9/bd/cc3a402a6439c15c3d4294333e13042b915bbeab54edc457c723931fed3f/GitPython-3.1.43-py3-none-any.whl.metadata\n",
      "  Downloading GitPython-3.1.43-py3-none-any.whl.metadata (13 kB)\n",
      "Collecting pydeck<1,>=0.8.0b4 (from streamlit)\n",
      "  Obtaining dependency information for pydeck<1,>=0.8.0b4 from https://files.pythonhosted.org/packages/ab/4c/b888e6cf58bd9db9c93f40d1c6be8283ff49d88919231afe93a6bcf61626/pydeck-0.9.1-py2.py3-none-any.whl.metadata\n",
      "  Downloading pydeck-0.9.1-py2.py3-none-any.whl.metadata (4.1 kB)\n",
      "Requirement already satisfied: tornado<7,>=6.0.3 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from streamlit) (6.3.2)\n",
      "Requirement already satisfied: watchdog>=2.1.5 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from streamlit) (2.1.6)\n",
      "Requirement already satisfied: jinja2 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (3.1.2)\n",
      "Requirement already satisfied: jsonschema>=3.0 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (4.17.3)\n",
      "Requirement already satisfied: toolz in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (0.12.0)\n",
      "Requirement already satisfied: colorama in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from click<9,>=7.0->streamlit) (0.4.6)\n",
      "Collecting gitdb<5,>=4.0.1 (from gitpython!=3.1.19,<4,>=3.0.7->streamlit)\n",
      "  Obtaining dependency information for gitdb<5,>=4.0.1 from https://files.pythonhosted.org/packages/fd/5b/8f0c4a5bb9fd491c277c21eff7ccae71b47d43c4446c9d0c6cff2fe8c2c4/gitdb-4.0.11-py3-none-any.whl.metadata\n",
      "  Downloading gitdb-4.0.11-py3-none-any.whl.metadata (1.2 kB)\n",
      "Requirement already satisfied: python-dateutil>=2.8.1 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from pandas<3,>=1.3.0->streamlit) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from pandas<3,>=1.3.0->streamlit) (2022.7)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2.0.4)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (3.4)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (1.26.16)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2023.7.22)\n",
      "Requirement already satisfied: markdown-it-py>=2.2.0 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from rich<14,>=10.14.0->streamlit) (2.2.0)\n",
      "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from rich<14,>=10.14.0->streamlit) (2.15.1)\n",
      "Collecting smmap<6,>=3.0.1 (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit)\n",
      "  Obtaining dependency information for smmap<6,>=3.0.1 from https://files.pythonhosted.org/packages/a7/a5/10f97f73544edcdef54409f1d839f6049a0d79df68adbc1ceb24d1aaca42/smmap-5.0.1-py3-none-any.whl.metadata\n",
      "  Downloading smmap-5.0.1-py3-none-any.whl.metadata (4.3 kB)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from jinja2->altair<6,>=4.0->streamlit) (2.1.1)\n",
      "Requirement already satisfied: attrs>=17.4.0 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (22.1.0)\n",
      "Requirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.18.0)\n",
      "Requirement already satisfied: mdurl~=0.1 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from markdown-it-py>=2.2.0->rich<14,>=10.14.0->streamlit) (0.1.0)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\luke holmes\\anaconda3\\lib\\site-packages (from python-dateutil>=2.8.1->pandas<3,>=1.3.0->streamlit) (1.16.0)\n",
      "Downloading streamlit-1.35.0-py2.py3-none-any.whl (8.6 MB)\n",
      "   ---------------------------------------- 0.0/8.6 MB ? eta -:--:--\n",
      "    --------------------------------------- 0.2/8.6 MB 3.1 MB/s eta 0:00:03\n",
      "   -- ------------------------------------- 0.5/8.6 MB 5.9 MB/s eta 0:00:02\n",
      "   --- ------------------------------------ 0.7/8.6 MB 5.9 MB/s eta 0:00:02\n",
      "   ----- ---------------------------------- 1.1/8.6 MB 5.7 MB/s eta 0:00:02\n",
      "   ------ --------------------------------- 1.3/8.6 MB 6.1 MB/s eta 0:00:02\n",
      "   ------- -------------------------------- 1.6/8.6 MB 6.2 MB/s eta 0:00:02\n",
      "   --------- ------------------------------ 1.9/8.6 MB 6.2 MB/s eta 0:00:02\n",
      "   ---------- ----------------------------- 2.2/8.6 MB 6.2 MB/s eta 0:00:02\n",
      "   ----------- ---------------------------- 2.5/8.6 MB 6.4 MB/s eta 0:00:01\n",
      "   ------------ --------------------------- 2.8/8.6 MB 6.3 MB/s eta 0:00:01\n",
      "   -------------- ------------------------- 3.0/8.6 MB 6.5 MB/s eta 0:00:01\n",
      "   --------------- ------------------------ 3.4/8.6 MB 6.5 MB/s eta 0:00:01\n",
      "   ---------------- ----------------------- 3.6/8.6 MB 6.4 MB/s eta 0:00:01\n",
      "   ------------------ --------------------- 3.9/8.6 MB 6.6 MB/s eta 0:00:01\n",
      "   ------------------ --------------------- 4.0/8.6 MB 6.2 MB/s eta 0:00:01\n",
      "   ------------------- -------------------- 4.2/8.6 MB 6.2 MB/s eta 0:00:01\n",
      "   --------------------- ------------------ 4.6/8.6 MB 6.3 MB/s eta 0:00:01\n",
      "   ---------------------- ----------------- 4.9/8.6 MB 6.3 MB/s eta 0:00:01\n",
      "   ------------------------ --------------- 5.3/8.6 MB 6.4 MB/s eta 0:00:01\n",
      "   ------------------------- -------------- 5.5/8.6 MB 6.3 MB/s eta 0:00:01\n",
      "   --------------------------- ------------ 5.8/8.6 MB 6.3 MB/s eta 0:00:01\n",
      "   ---------------------------- ----------- 6.2/8.6 MB 6.3 MB/s eta 0:00:01\n",
      "   ------------------------------ --------- 6.5/8.6 MB 6.4 MB/s eta 0:00:01\n",
      "   -------------------------------- ------- 6.9/8.6 MB 6.5 MB/s eta 0:00:01\n",
      "   --------------------------------- ------ 7.2/8.6 MB 6.4 MB/s eta 0:00:01\n",
      "   ---------------------------------- ----- 7.5/8.6 MB 6.4 MB/s eta 0:00:01\n",
      "   ----------------------------------- ---- 7.6/8.6 MB 6.4 MB/s eta 0:00:01\n",
      "   ------------------------------------ --- 7.9/8.6 MB 6.4 MB/s eta 0:00:01\n",
      "   -------------------------------------- - 8.2/8.6 MB 6.4 MB/s eta 0:00:01\n",
      "   ---------------------------------------  8.5/8.6 MB 6.4 MB/s eta 0:00:01\n",
      "   ---------------------------------------  8.6/8.6 MB 6.5 MB/s eta 0:00:01\n",
      "   ---------------------------------------- 8.6/8.6 MB 6.2 MB/s eta 0:00:00\n",
      "Downloading blinker-1.8.2-py3-none-any.whl (9.5 kB)\n",
      "Downloading cachetools-5.3.3-py3-none-any.whl (9.3 kB)\n",
      "Downloading GitPython-3.1.43-py3-none-any.whl (207 kB)\n",
      "   ---------------------------------------- 0.0/207.3 kB ? eta -:--:--\n",
      "   ---------------------------------------- 207.3/207.3 kB 6.2 MB/s eta 0:00:00\n",
      "Downloading pydeck-0.9.1-py2.py3-none-any.whl (6.9 MB)\n",
      "   ---------------------------------------- 0.0/6.9 MB ? eta -:--:--\n",
      "   - -------------------------------------- 0.3/6.9 MB 9.2 MB/s eta 0:00:01\n",
      "   --- ------------------------------------ 0.6/6.9 MB 6.8 MB/s eta 0:00:01\n",
      "   ---- ----------------------------------- 0.7/6.9 MB 6.8 MB/s eta 0:00:01\n",
      "   ---- ----------------------------------- 0.7/6.9 MB 6.8 MB/s eta 0:00:01\n",
      "   ---- ----------------------------------- 0.7/6.9 MB 6.8 MB/s eta 0:00:01\n",
      "   --------- ------------------------------ 1.6/6.9 MB 6.4 MB/s eta 0:00:01\n",
      "   ---------- ----------------------------- 1.9/6.9 MB 6.6 MB/s eta 0:00:01\n",
      "   ------------ --------------------------- 2.2/6.9 MB 6.6 MB/s eta 0:00:01\n",
      "   ------------- -------------------------- 2.4/6.9 MB 6.6 MB/s eta 0:00:01\n",
      "   --------------- ------------------------ 2.7/6.9 MB 6.7 MB/s eta 0:00:01\n",
      "   ----------------- ---------------------- 3.0/6.9 MB 6.6 MB/s eta 0:00:01\n",
      "   ------------------- -------------------- 3.3/6.9 MB 6.7 MB/s eta 0:00:01\n",
      "   -------------------- ------------------- 3.6/6.9 MB 6.6 MB/s eta 0:00:01\n",
      "   ---------------------- ----------------- 3.9/6.9 MB 6.6 MB/s eta 0:00:01\n",
      "   ------------------------ --------------- 4.2/6.9 MB 6.6 MB/s eta 0:00:01\n",
      "   ------------------------- -------------- 4.5/6.9 MB 6.7 MB/s eta 0:00:01\n",
      "   ---------------------------- ----------- 4.8/6.9 MB 6.7 MB/s eta 0:00:01\n",
      "   ----------------------------- ---------- 5.2/6.9 MB 6.6 MB/s eta 0:00:01\n",
      "   ------------------------------- -------- 5.5/6.9 MB 6.7 MB/s eta 0:00:01\n",
      "   --------------------------------- ------ 5.8/6.9 MB 6.6 MB/s eta 0:00:01\n",
      "   ----------------------------------- ---- 6.2/6.9 MB 6.7 MB/s eta 0:00:01\n",
      "   ------------------------------------- -- 6.4/6.9 MB 6.7 MB/s eta 0:00:01\n",
      "   -------------------------------------- - 6.7/6.9 MB 6.7 MB/s eta 0:00:01\n",
      "   ---------------------------------------  6.9/6.9 MB 6.7 MB/s eta 0:00:01\n",
      "   ---------------------------------------- 6.9/6.9 MB 6.4 MB/s eta 0:00:00\n",
      "Downloading gitdb-4.0.11-py3-none-any.whl (62 kB)\n",
      "   ---------------------------------------- 0.0/62.7 kB ? eta -:--:--\n",
      "   ---------------------------------------- 62.7/62.7 kB ? eta 0:00:00\n",
      "Downloading smmap-5.0.1-py3-none-any.whl (24 kB)\n",
      "Installing collected packages: smmap, cachetools, blinker, pydeck, gitdb, gitpython, streamlit\n",
      "Successfully installed blinker-1.8.2 cachetools-5.3.3 gitdb-4.0.11 gitpython-3.1.43 pydeck-0.9.1 smmap-5.0.1 streamlit-1.35.0\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install streamlit\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9044be5d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-05-25 09:34:59.875 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\Luke Holmes\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2024-05-25 09:34:59.891 Session state does not function when running a script without `streamlit run`\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "\n",
    "# Load the dataset\n",
    "df_reduced = pd.read_csv('reduced_dataset.csv')\n",
    "\n",
    "# Define the vibrant color palette\n",
    "vibrant_palette = {\n",
    "    'positive': '#00CC96',\n",
    "    'neutral': '#636EFA',\n",
    "    'negative': '#EF553B'\n",
    "}\n",
    "\n",
    "# Title of the dashboard\n",
    "st.title(\"Music Data Dashboard\")\n",
    "\n",
    "# Sidebar filters\n",
    "selected_genres = st.sidebar.multiselect(\n",
    "    \"Choose your Vibe (Genre)\",\n",
    "    options=df_reduced['track_genre'].unique(),\n",
    "    default=[]\n",
    ")\n",
    "\n",
    "mood_metric = st.sidebar.selectbox(\n",
    "    \"Select Your Mood Metric\",\n",
    "    options=['danceability', 'energy', 'valence', 'acousticness', 'liveness', 'speechiness'],\n",
    "    index=0\n",
    ")\n",
    "\n",
    "# Filter data based on selection\n",
    "if selected_genres:\n",
    "    filtered_df = df_reduced[df_reduced['track_genre'].isin(selected_genres)]\n",
    "else:\n",
    "    filtered_df = df_reduced\n",
    "\n",
    "# Generate plots\n",
    "fig_genre_sentiment = px.bar(\n",
    "    filtered_df.groupby(['track_genre', 'sentiment']).size().reset_index(name='count'),\n",
    "    x='track_genre', y='count', color='sentiment', barmode='stack',\n",
    "    color_discrete_map=vibrant_palette, \n",
    "    title='Sentiment Distribution by Genre'\n",
    ")\n",
    "fig_genre_sentiment.update_layout(\n",
    "    title_font_size=24, title_font_color='#2E86C1', title_x=0.5,\n",
    "    xaxis_title='Genre', yaxis_title='Count',\n",
    "    legend_title='Sentiment', xaxis_tickangle=-45,\n",
    "    plot_bgcolor='white', paper_bgcolor='white',\n",
    "    font=dict(size=16)\n",
    ")\n",
    "\n",
    "fig_sentiment_popularity = px.box(\n",
    "    filtered_df, x='sentiment', y='popularity', color='sentiment', \n",
    "    color_discrete_map=vibrant_palette,\n",
    "    title='Sentiment vs. Popularity'\n",
    ")\n",
    "fig_sentiment_popularity.update_layout(\n",
    "    title_font_size=24, title_font_color='#2E86C1', title_x=0.5,\n",
    "    xaxis_title='Sentiment', yaxis_title='Popularity',\n",
    "    plot_bgcolor='white', paper_bgcolor='white',\n",
    "    font=dict(size=16)\n",
    ")\n",
    "\n",
    "fig_sentiment_danceability = px.box(\n",
    "    filtered_df, x='sentiment', y='danceability', color='sentiment', \n",
    "    color_discrete_map=vibrant_palette,\n",
    "    title='Sentiment vs. Danceability'\n",
    ")\n",
    "fig_sentiment_danceability.update_layout(\n",
    "    title_font_size=24, title_font_color='#2E86C1', title_x=0.5,\n",
    "    xaxis_title='Sentiment', yaxis_title='Danceability',\n",
    "    plot_bgcolor='white', paper_bgcolor='white',\n",
    "    font=dict(size=16)\n",
    ")\n",
    "\n",
    "fig_sentiment_energy = px.box(\n",
    "    filtered_df, x='sentiment', y='energy', color='sentiment', \n",
    "    color_discrete_map=vibrant_palette,\n",
    "    title='Sentiment vs. Energy'\n",
    ")\n",
    "fig_sentiment_energy.update_layout(\n",
    "    title_font_size=24, title_font_color='#2E86C1', title_x=0.5,\n",
    "    xaxis_title='Sentiment', yaxis_title='Energy',\n",
    "    plot_bgcolor='white', paper_bgcolor='white',\n",
    "    font=dict(size=16)\n",
    ")\n",
    "\n",
    "fig_mood_navigator = px.scatter(\n",
    "    filtered_df, x=mood_metric, y='energy', color='sentiment', size='popularity', \n",
    "    hover_data=['track_name', 'artists'], color_discrete_map=vibrant_palette,\n",
    "    title=f'Find Your Track Based on {mood_metric.capitalize()} and Energy'\n",
    ")\n",
    "fig_mood_navigator.update_layout(\n",
    "    title_font_size=24, title_font_color='#2E86C1', title_x=0.5,\n",
    "    xaxis_title=mood_metric.capitalize(), yaxis_title='Energy',\n",
    "    plot_bgcolor='white', paper_bgcolor='white',\n",
    "    font=dict(size=16)\n",
    ")\n",
    "\n",
    "# Display plots in tabs\n",
    "tab1, tab2, tab3, tab4, tab5 = st.tabs(\n",
    "    [\"Sentiment Distribution by Genre\", \"Sentiment vs. Popularity\", \n",
    "     \"Sentiment vs. Danceability\", \"Sentiment vs. Energy\", \"Mood Navigator\"]\n",
    ")\n",
    "\n",
    "with tab1:\n",
    "    st.plotly_chart(fig_genre_sentiment)\n",
    "\n",
    "with tab2:\n",
    "    st.plotly_chart(fig_sentiment_popularity)\n",
    "\n",
    "with tab3:\n",
    "    st.plotly_chart(fig_sentiment_danceability)\n",
    "\n",
    "with tab4:\n",
    "    st.plotly_chart(fig_sentiment_energy)\n",
    "\n",
    "with tab5:\n",
    "    st.plotly_chart(fig_mood_navigator)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0b1874bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current working directory: C:\\Users\\Luke Holmes\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "current_directory = os.getcwd()\n",
    "\n",
    "print(f\"Current working directory: {current_directory}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2b1ea709",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "7cc85da9",
   "metadata": {},
   "source": [
    "# Music Data Dashboard Code Explanation\n",
    "\n",
    "This section provides a detailed explanation of the code used to create an interactive Music Data Dashboard using Dash and Plotly Express.\n",
    "\n",
    "## Line-by-Line Breakdown\n",
    "\n",
    "```python\n",
    "import pandas as pd\n",
    "from dash import dcc, html\n",
    "from dash.dependencies import Input, Output\n",
    "import dash\n",
    "import plotly.express as px\n",
    "\n",
    "# Import necessary libraries: pandas for data manipulation, dash for building the web application, and plotly.express for creating interactive plots.\n",
    "\n",
    "df_reduced = pd.read_csv('reduced_dataset.csv')\n",
    "\n",
    "# Load the dataset containing information about music tracks into a DataFrame.\n",
    "\n",
    "vibrant_palette = {\n",
    "    'positive': '#00CC96',\n",
    "    'neutral': '#636EFA',\n",
    "    'negative': '#EF553B'\n",
    "}\n",
    "\n",
    "# Define a color palette for visualizing sentiments (positive, neutral, negative).\n",
    "\n",
    "fig_genre_sentiment = px.bar(\n",
    "    df_reduced.groupby(['track_genre', 'sentiment']).size().reset_index(name='count'),\n",
    "    x='track_genre', y='count', color='sentiment', barmode='stack',\n",
    "    color_discrete_map=vibrant_palette, \n",
    "    title='Sentiment Distribution by Genre'\n",
    ")\n",
    "fig_genre_sentiment.update_layout(\n",
    "    title_font_size=24, title_font_color='#2E86C1', title_x=0.5,\n",
    "    xaxis_title='Genre', yaxis_title='Count',\n",
    "    legend_title='Sentiment', xaxis_tickangle=-45,\n",
    "    plot_bgcolor='white', paper_bgcolor='white',\n",
    "    font=dict(size=16)\n",
    ")\n",
    "\n",
    "# Create a stacked bar chart showing the sentiment distribution across different genres.\n",
    "# Customize the layout with specific font sizes, colors, and background settings.\n",
    "\n",
    "fig_sentiment_popularity = px.box(\n",
    "    df_reduced, x='sentiment', y='popularity', color='sentiment', \n",
    "    color_discrete_map=vibrant_palette,\n",
    "    title='Sentiment vs. Popularity'\n",
    ")\n",
    "fig_sentiment_popularity.update_layout(\n",
    "    title_font_size=24, title_font_color='#2E86C1', title_x=0.5,\n",
    "    xaxis_title='Sentiment', yaxis_title='Popularity',\n",
    "    plot_bgcolor='white', paper_bgcolor='white',\n",
    "    font=dict(size=16)\n",
    ")\n",
    "\n",
    "# Create a box plot to analyze the relationship between sentiment and track popularity.\n",
    "# Customize the layout similarly to the previous chart.\n",
    "\n",
    "fig_sentiment_danceability = px.box(\n",
    "    df_reduced, x='sentiment', y='danceability', color='sentiment', \n",
    "    color_discrete_map=vibrant_palette,\n",
    "    title='Sentiment vs. Danceability'\n",
    ")\n",
    "fig_sentiment_danceability.update_layout(\n",
    "    title_font_size=24, title_font_color='#2E86C1', title_x=0.5,\n",
    "    xaxis_title='Sentiment', yaxis_title='Danceability',\n",
    "    plot_bgcolor='white', paper_bgcolor='white',\n",
    "    font=dict(size=16)\n",
    ")\n",
    "\n",
    "# Create a box plot to examine how sentiment correlates with danceability.\n",
    "# Customize the layout with specific font sizes, colors, and background settings.\n",
    "\n",
    "fig_sentiment_energy = px.box(\n",
    "    df_reduced, x='sentiment', y='energy', color='sentiment', \n",
    "    color_discrete_map=vibrant_palette,\n",
    "    title='Sentiment vs. Energy'\n",
    ")\n",
    "fig_sentiment_energy.update_layout(\n",
    "    title_font_size=24, title_font_color='#2E86C1', title_x=0.5,\n",
    "    xaxis_title='Sentiment', yaxis_title='Energy',\n",
    "    plot_bgcolor='white', paper_bgcolor='white',\n",
    "    font=dict(size=16)\n",
    ")\n",
    "\n",
    "# Create a box plot to investigate the relationship between sentiment and energy levels.\n",
    "# Customize the layout similarly to the previous charts.\n",
    "\n",
    "app = dash.Dash(__name__)\n",
    "\n",
    "# Initialize the Dash application.\n",
    "\n",
    "app.layout = html.Div([\n",
    "    html.H1(\"Music Data Dashboard\", style={'text-align': 'center', 'color': '#2E86C1'}),\n",
    "    \n",
    "    dcc.Dropdown(\n",
    "        id='genre-filter',\n",
    "        options=[{'label': genre, 'value': genre} for genre in df_reduced['track_genre'].unique()],\n",
    "        value=[],\n",
    "        multi=True,\n",
    "        placeholder=\"Choose your Vibe (Genre)\"\n",
    "    ),\n",
    "    \n",
    "    dcc.Dropdown(\n",
    "        id='mood-metric',\n",
    "        options=[\n",
    "            {'label': 'Danceability (Get Groovy)', 'value': 'danceability'},\n",
    "            {'label': 'Energy (Pump it Up)', 'value': 'energy'},\n",
    "            {'label': 'Valence (Feel-Good Factor)', 'value': 'valence'},\n",
    "            {'label': 'Acousticness (Unplugged Vibes)', 'value': 'acousticness'},\n",
    "            {'label': 'Liveness (Live Feels)', 'value': 'liveness'},\n",
    "            {'label': 'Speechiness (Talk the Talk)', 'value': 'speechiness'}\n",
    "        ],\n",
    "        value='danceability',\n",
    "        placeholder=\"Select Your Mood Metric\"\n",
    "    ),\n",
    "    \n",
    "    dcc.Tabs([\n",
    "        dcc.Tab(label='Sentiment Distribution by Genre', children=[\n",
    "            dcc.Graph(id='sentiment-genre-bar', figure=fig_genre_sentiment)\n",
    "        ]),\n",
    "        \n",
    "        dcc.Tab(label='Sentiment vs. Popularity', children=[\n",
    "            dcc.Graph(id='sentiment-popularity-box', figure=fig_sentiment_popularity)\n",
    "        ]),\n",
    "        \n",
    "        dcc.Tab(label='Sentiment vs. Danceability', children=[\n",
    "            dcc.Graph(id='sentiment-danceability-box', figure=fig_sentiment_danceability)\n",
    "        ]),\n",
    "        \n",
    "        dcc.Tab(label='Sentiment vs. Energy', children=[\n",
    "            dcc.Graph(id='sentiment-energy-box', figure=fig_sentiment_energy)\n",
    "        ]),\n",
    "        \n",
    "        dcc.Tab(label='Mood Navigator', children=[\n",
    "            dcc.Graph(id='mood-navigator')\n",
    "        ]),\n",
    "    ], colors={\n",
    "        \"border\": \"#2E86C1\",\n",
    "        \"primary\": \"#2E86C1\",\n",
    "        \"background\": \"white\"\n",
    "    })\n",
    "])\n",
    "\n",
    "# Define the layout of the Dash application.\n",
    "# Add a heading and dropdown filters for genre and mood metric selection.\n",
    "# Create tabs for different visualizations, each containing a corresponding graph.\n",
    "\n",
    "@app.callback(\n",
    "    [Output('sentiment-genre-bar', 'figure'),\n",
    "     Output('sentiment-popularity-box', 'figure'),\n",
    "     Output('sentiment-danceability-box', 'figure'),\n",
    "     Output('sentiment-energy-box', 'figure'),\n",
    "     Output('mood-navigator', 'figure')],\n",
    "    [Input('genre-filter', 'value'),\n",
    "     Input('mood-metric', 'value')]\n",
    ")\n",
    "def update_figures(selected_genres, mood_metric):\n",
    "    if not selected_genres:\n",
    "        filtered_df = df_reduced\n",
    "    else:\n",
    "        filtered_df = df_reduced[df_reduced['track_genre'].isin(selected_genres)]\n",
    "    \n",
    "    fig_genre_sentiment = px.bar(\n",
    "        filtered_df.groupby(['track_genre', 'sentiment']).size().reset_index(name='count'),\n",
    "        x='track_genre', y='count', color='sentiment', barmode='stack',\n",
    "        color_discrete_map=vibrant_palette, \n",
    "        title='Sentiment Distribution by Genre'\n",
    "    )\n",
    "    fig_genre_sentiment.update_layout(\n",
    "        title_font_size=24, title_font_color='#2E86C1', title_x=0.5,\n",
    "        xaxis_title='Genre', yaxis_title='Count',\n",
    "        legend_title='Sentiment', xaxis_tickangle=-45,\n",
    "        plot_bgcolor='white', paper_bgcolor='white',\n",
    "        font=dict(size=16)\n",
    "    )\n",
    "\n",
    "    fig_sentiment_popularity = px.box(\n",
    "        filtered_df, x='sentiment', y='popularity', color='sentiment', \n",
    "        color_discrete_map=vibrant_palette,\n",
    "        title='Sentiment vs. Popularity'\n",
    "    )\n",
    "    fig_sentiment_popularity.update_layout(\n",
    "        title_font_size=24, title_font_color='#2E86C1', title_x=0.5,\n",
    "        xaxis_title='Sentiment', yaxis_title='Popularity',\n",
    "        plot_bgcolor='white', paper_bgcolor='white',\n",
    "        font=dict(size=16)\n",
    "    )\n",
    "\n",
    "    fig_sentiment_danceability = px.box(\n",
    "        filtered_df, x='sentiment', y='danceability', color='sentiment', \n",
    "        color_discrete_map=vibrant_palette,\n",
    "        title='Sentiment vs. Danceability'\n",
    "    )\n",
    "    fig_sentiment_danceability.update_layout(\n",
    "        title_font_size=24, title_font_color='#2E86C1', title_x=0.5,\n",
    "        xaxis_title='Sentiment', yaxis_title='Danceability',\n",
    "        plot_bgcolor='white', paper_bgcolor='white',\n",
    "        font=dict(size=16)\n",
    "    )\n",
    "\n",
    "    fig_sentiment_energy = px.box(\n",
    "        filtered_df, x='sentiment', y='energy', color='sentiment', \n",
    "        color_discrete_map=vibrant_palette,\n",
    "        title='Sentiment vs. Energy'\n",
    "    )\n",
    "    fig_sentiment_energy.update_layout(\n",
    "        title_font_size=24, title_font_color='#2E86C1', title_x=0.5,\n",
    "        xaxis_title='Sentiment', yaxis_title='Energy',\n",
    "        plot_bgcolor='white', paper_bgcolor='white',\n",
    "        font=dict(size=16)\n",
    "    )\n",
    "    \n",
    "    fig_mood_navigator = px.scatter(\n",
    "        filtered_df, x=mood_metric, y='energy', color='sentiment', size='popularity', \n",
    "        hover_data=['track_name', 'artists'], color_discrete_map=vibrant_palette,\n",
    "        title=f'Find Your Track Based on {mood_metric.split()[0].capitalize()} and Energy'\n",
    "    )\n",
    "    fig_mood_navigator.update_layout(\n",
    "        title_font_size=24, title_font_color='#2E86C1', title_x=0.5,\n",
    "        xaxis_title=mood_metric.split()[0].capitalize(), yaxis_title='Energy',\n",
    "        plot_bgcolor='white', paper_bgcolor='white',\n",
    "        font=dict(size=16)\n",
    "    )\n",
    "    \n",
    "    return (fig_genre_sentiment, fig_sentiment_popularity, fig_sentiment_danceability, fig_sentiment_energy, fig_mood_navigator)\n",
    "\n",
    "# Define the callback function that updates the figures based on user-selected genres and mood metrics.\n",
    "# Filter the DataFrame based on the selected genres.\n",
    "# Update each figure with the filtered data.\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=True, port=8056)\n",
    "\n",
    "# Run the Dash server on port 8056 with debugging enabled.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59b41364",
   "metadata": {},
   "source": [
    "## Summary\n",
    "\n",
    "This code sets up a comprehensive Music Data Dashboard that allows users to explore and analyze music data interactively. By leveraging Dash and Plotly Express, the dashboard provides valuable insights into the relationships between music genres, sentiments, and various musical metrics, which can be used to enhance user engagement and drive business growth in the online retail music industry.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd9151a8",
   "metadata": {},
   "source": [
    "## Program Learning Outcomes (PLOs)\n",
    "\n",
    "This project demonstrates the following Program Learning Outcomes (PLOs):\n",
    "\n",
    "### PLO 1: Knowledge Application\n",
    "- **Description**: Apply knowledge of data analysis and visualization to real-world scenarios.\n",
    "- **Application**: The Music Data Dashboard project uses advanced data visualization techniques to provide insights into music data, demonstrating the practical application of theoretical knowledge.\n",
    "\n",
    "### PLO 2: Technical Proficiency\n",
    "- **Description**: Demonstrate proficiency in using modern data analysis tools and programming languages.\n",
    "- **Application**: This project utilizes Python, Dash, and Plotly Express, showcasing technical skills in these tools and libraries for building interactive web applications.\n",
    "\n",
    "### PLO 3: Critical Thinking and Problem Solving\n",
    "- **Description**: Analyze complex problems and develop effective solutions.\n",
    "- **Application**: By analyzing relationships between music genres, sentiments, and various metrics, the project addresses the problem of enhancing user engagement in the online retail music industry.\n",
    "\n",
    "### PLO 4: Communication Skills\n",
    "- **Description**: Effectively communicate data-driven insights.\n",
    "- **Application**: The dashboard presents data in an accessible and interactive manner, allowing users to easily interpret and act on the insights provided.\n",
    "\n",
    "### PLO 5: Data Management and Ethics\n",
    "- **Description**: Manage and utilize data responsibly and ethically.\n",
    "- **Application**: The project involves managing a dataset responsibly and ensuring that the visualizations are used to provide ethical and accurate insights.\n",
    "\n",
    "### PLO 6: Innovation and Creativity\n",
    "- **Description**: Demonstrate innovation in applying data science techniques.\n",
    "- **Application**: The Music Data Dashboard introduces innovative ways to explore music data, using creative visualizations to enhance user engagement and business growth.\n",
    "\n",
    "By completing this project, the integration of these PLOs is evident, showcasing the comprehensive skill set developed throughout the program."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "70105123",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
